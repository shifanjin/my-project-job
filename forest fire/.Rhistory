library(readr)
#library(DataComputing)
library(glmnet)
library(tree)
library(boot)
library(class)
library(randomForest)
library(corrplot)
library(boot)
data=read_csv("forestfires.csv")
set.seed(1)
#clean dataset
par(mfrow=c(1,2))
hist(data$area)
hist(data$FFMC)
data$area=log(data$area+1)
hist(data$area)
data$FFMC=data$FFMC^13
data=data[-which.max(data$ISI),]
data=data[,-12]
summary(data)
#give numbers to categorical variables
num.data=data
num.data$month=gsub('jan', 1, num.data$month)
num.data$month=gsub('feb', 2, num.data$month)
num.data$month=gsub('mar', 3, num.data$month)
num.data$month=gsub('apr', 4, num.data$month)
num.data$month=gsub('may', 5, num.data$month)
num.data$month=gsub('jun', 6, num.data$month)
num.data$month=gsub('jul', 7, num.data$month)
num.data$month=gsub('aug', 8, num.data$month)
num.data$month=gsub('sep', 9, num.data$month)
num.data$month=gsub('oct', 10, num.data$month)
num.data$month=gsub('nov', 11, num.data$month)
num.data$month=gsub('dec', 12, num.data$month)
num.data$day=gsub('mon', 1, num.data$day)
num.data$day=gsub('tue', 2, num.data$day)
num.data$day=gsub('wed', 3, num.data$day)
num.data$day=gsub('thu', 4, num.data$day)
num.data$day=gsub('fri', 5, num.data$day)
num.data$day=gsub('sat', 6, num.data$day)
num.data$day=gsub('sun', 7, num.data$day)
num.data$day=as.numeric(num.data$day)
num.data$month=as.numeric(num.data$month)
num.cor=cor(num.data)
corrplot(num.cor, method = 'ellipse')
pairs(num.data)
#make binary variables for categorical data
jan=rep(0,516)
feb=rep(0,516)
mar=rep(0,516)
apr=rep(0,516)
may=rep(0,516)
jun=rep(0,516)
jul=rep(0,516)
aug=rep(0,516)
sep=rep(0,516)
oct=rep(0,516)
nov=rep(0,516)
dec=rep(0,516)
for(i in 1:516){
if(data$month[i]=='jan'){jan[i]=1}
else if(data$month[i]=='feb'){feb[i]=1}
else if(data$month[i]=='mar'){mar[i]=1}
else if(data$month[i]=='apr'){apr[i]=1}
else if(data$month[i]=='may'){may[i]=1}
else if(data$month[i]=='jun'){jun[i]=1}
else if(data$month[i]=='jul'){jul[i]=1}
else if(data$month[i]=='aug'){aug[i]=1}
else if(data$month[i]=='sep'){sep[i]=1}
else if(data$month[i]=='oct'){oct[i]=1}
else if(data$month[i]=='nov'){nov[i]=1}
else if(data$month[i]=='dec'){dec[i]=1}
}
mon=rep(0,516)
tue=rep(0,516)
wed=rep(0,516)
thu=rep(0,516)
fri=rep(0,516)
sat=rep(0,516)
sun=rep(0,516)
for(i in 1:516){
if(data$day[i]=='mon'){mon[i]=1}
else if(data$day[i]=='tue'){tue[i]=1}
else if(data$day[i]=='wed'){wed[i]=1}
else if(data$day[i]=='thu'){thu[i]=1}
else if(data$day[i]=='fri'){fri[i]=1}
else if(data$day[i]=='sat'){sat[i]=1}
else if(data$day[i]=='sun'){sun[i]=1}
}
data=data[,-(3:4)]
data=data.frame(data[,1:10], jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,mon,tue,wed,thu,fri,sat,sun)
train=sample(1:516,344)
#try model selection methods
min.model=glm(area~1, data=data[train,])
biggest=formula(glm(area~., data=data[train,]))
fwd.model=step(min.model, direction = 'forward', scope=biggest)
summary(fwd.model)
full.model=glm(area~.,data=data[train,])
back.model=step(full.model, direction='backward', trace=T)
summary(back.model)
#original MSE
test=data[-train,]
fwd.pred=predict(fwd.model, newdata=test)
fwd.mse=mean((fwd.pred-test$area)^2)
fwd.mse
back.pred=predict(back.model, newdata=test)
back.mse=mean((back.pred-test$area)^2)
back.mse
#k-fold cross validation
glm.fit.1=glm(area~dec+DMC+X+sep, data=data)
cv.err.1=cv.glm(data,glm.fit.1)
cv.err.1
glm.fit.2=glm(area~X + DMC + temp + jan + feb + mar + apr + jun + jul + aug + sep + oct, data=data)
cv.err.2=cv.glm(data,glm.fit.2)
cv.err.2
bag.area=randomForest(area~., data=data[train,], mtry=6, importance=TRUE)
area.pred=predict(bag.area, newdata=data[-train,])
test.data=data[-train,]$area
plot(area.pred, test.data)
abline(0,1)
mean((area.pred-test.data)^2) #1.943381 in the same range as before
#my models so far are crap. again lol.
importance(bag.area)
varImpPlot(bag.area)
#reclassify data
clus=data
clus$FFMC=exp(clus$FFMC)
clus$area=exp(clus$area)-1
#for(i in 1:517){
#if(clus$area[i]==0){clus$area[i]='low'}
#else if (clus$area[i]<=20){clus$area[i]='medium'}
#else if (clus$area[i]<50){clus$area[i]='high'}
#else (clus$area[i]='super high')
#}
#SVM
#KNN
test=clus[-train,]
folds=function(x){
knn.fire=knn(clus[train,c(4,5)], test[,c(4,5)], clus[train,]$area, k=x)
least=mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(4,7)], test[,c(4,7)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(4,8)], test[,c(4,8)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(4,19)], test[,c(4,19)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(4,22)], test[,c(4,22)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(5,7)], test[,c(5,7)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(5,8)], test[,c(5,8)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(5,19)], test[,c(5,19)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(5,22)], test[,c(5,22)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(7,8)], test[,c(7,8)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(7,19)], test[,c(7,19)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(7,22)], test[,c(7,22)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(8,19)], test[,c(8,19)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(8,22)], test[,c(8,22)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
knn.fire=knn(clus[train,c(19,22)], test[,c(19,22)], clus[train,]$area, k=x)
a=mean(knn.fire==test$area)
if(a>least){least=a}
return(least)
}
sapply(1:20, folds)
#which combo of variables?
x=18
knn.fire=knn(clus[train,c(4,5)], test[,c(4,5)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(4,7)], test[,c(4,7)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(4,8)], test[,c(4,8)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(4,19)], test[,c(4,19)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(4,22)], test[,c(4,22)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(5,7)], test[,c(5,7)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(5,8)], test[,c(5,8)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(5,19)], test[,c(5,19)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(5,22)], test[,c(5,22)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(7,8)], test[,c(7,8)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(7,19)], test[,c(7,19)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(7,22)], test[,c(7,22)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(8,19)], test[,c(8,19)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(8,22)], test[,c(8,22)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knn.fire=knn(clus[train,c(19,22)], test[,c(19,22)], clus[train,]$area, k=x)
mean(knn.fire==test$area)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(dplyr)
set.seed(1)
forest = read.csv("forestfires.csv", stringsAsFactors = FALSE)
table(forest$rain)
barplot(table(forest$rain), main = "rain freq")
## Most of the fire happens when there's no rain
## In this case, Let's remove "rain" for this practice
forest = forest[, -12]
# Transform the data
forest$area = log(forest$area + 1)
forest$FFMC = log(forest$FFMC)
#forest$ISI = log(forest$ISI)
########## CHANGING month and day into numeric values
for (i in 1:517) {
if(forest$month[i] == "jan") {
forest$month[i] = 1
}else if (forest$month[i] == "feb") {
forest$month[i] = 2
}else if (forest$month[i] == "mar") {
forest$month[i] = 3
}else if (forest$month[i] == "apr") {
forest$month[i] = 4
}else if (forest$month[i] == "may") {
forest$month[i] = 5
}else if (forest$month[i] == "jun") {
forest$month[i] = 6
}else if (forest$month[i] == "jul") {
forest$month[i] = 7
}else if (forest$month[i] == "aug") {
forest$month[i] = 8
}else if (forest$month[i] == "sep") {
forest$month[i] = 9
}else if (forest$month[i] == "oct") {
forest$month[i] = 10
}else if (forest$month[i] == "nov") {
forest$month[i] = 11
}else if (forest$month[i] == "dec") {
forest$month[i] = 12
}
if (forest$day[i] == "mon") {
forest$day[i] = 1
} else if (forest$day[i] == "tue") {
forest$day[i] = 2
} else if (forest$day[i] == "wed") {
forest$day[i] = 3
} else if (forest$day[i] == "thu") {
forest$day[i] = 4
} else if (forest$day[i] == "fri") {
forest$day[i] = 5
} else if (forest$day[i] == "sat") {
forest$day[i] = 6
} else if (forest$day[i] == "sun") {
forest$day[i] = 7
}
}
class(forest$month[157])
class(forest$day[157])
forest$month = as.numeric(forest$month)
forest$day = as.numeric(forest$day)
cor(forest)
# FOR PREDICTING "AREA"
#'temp' has the highest correlation with the area of forest fire(which is a positive correlation), followed by 'RH' also a positive correlation, 'Rain' has the least correlation
train_size = floor((length(forest$X)/3) * 2)
train = sample(517, train_size)
test_size = length(forest$X) - train
trainset = forest[train, ]
testset = forest[-train, ]
glm.fits_new1 = glm(area~ X + month + day + FFMC + DMC + DC + ISI + temp + RH + wind, data = trainset)
# Let's make a model
#lm.fit = lm(area~ X + Y + month + day + FFMC + DMC + DC + ISI + temp + RH + wind, data = forest)
#glm.fits = glm(area~ ., data = trainset)
glm.fits = glm(area~ X + Y + month + day + FFMC + DMC + DC + ISI + temp + RH + wind, data = trainset)
# Let's try forward and backward selection to figure out which variable have more significant effect on causing a fire.
###################Backward
backwards=step(glm.fits)
# OUTPUT: area ~ X + month + DMC + DC + ISI + temp
# with the lowest AIC = 1214.32
summary(backwards)
###################Forward
nothing = glm(area~ 1, data = trainset)
forwards = step(nothing,
scope = list(lower = formula(nothing),
upper = formula(glm.fits)), direction = "forward")
# OUTPUT: area ~ month + Y
# with the lowest AIC = 1214.44
summary(forwards)
###################Use CV to see which model is better
###################Applied the trained model (both backward and forward) to the test-data to compare the error
pred_back = predict(backwards, testset)
mean((pred_back - testset$area)^2)
pred_forward = predict(forwards, testset)
mean((pred_forward - testset$area)^2)
###Looks like forward selection model is better, since the MSE is lower (1.872752 < 1.886026)
###################################TRANSFORMING >>> "fire"
# Since the 13th column indicates the burned area, if there isn't fire, the area = 0. In this case, we can transform this variable into whether or not there is a forest fire.
fire = rep(0, length(forest$X))
forest = cbind(forest, fire)
for (i in 1:length(forest$area)) {
if (forest$area[i] > 0) {
forest$fire[i] = 1
}
}
# In this case, if fire = 0, there is no fire, if fire = 1, there is a fire.
###################################FINDING MODEL
# Let's make a model (excluding month, day, since they are not numeric):
glm.fits = glm(fire~ X + Y + FFMC + DMC + DC + ISI + temp + RH + wind + area, data = forest)
# Let's try forward and backward selection to figure out which variable have more significant effect on causing a fire.
###################Backward
backwards=step(glm.fits)
# OUTPUT: fire ~ Y + DC + wind + area
# with the lowest AIC = 732.78
###################Forward
nothing = glm(fire~ 1, data = forest)
forwards = step(nothing,
scope = list(lower = formula(nothing),
upper = formula(glm.fits)), direction = "forward")
# OUTPUT: fire ~ area + DC + wind + Y
# with the lowest AIC = 732.78
######### lOOKS LIKE BOTH BACKWARD AND FORWARD SUGGESTS THE SAME MODEL: fire ~ Y + DC + wind + area
glm.selected = glm(fire ~ area + DC + wind + Y, data = forest)
summary(glm.selected)
plot(forest$area, forest$fire)
plot(forest$DC, forest$fire)
plot(forest$wind, forest$fire)
plot(forest$Y, forest$fire)
#################USE linear discriminant analysis
#######################USE SVM???
########################################USE TREE TO SEE HOW TO CLASSIFY AS SMALL FIRE, MEDIUM FIRE, BIG FIRE?
#randomly divide the dataset to make training set and testing set to see if our model is good or not
train = sample(length(forest$X), size = 450)
trainset = forest[train,]
testset = forest[-train,]
dim(trainset)
dim(testset)
lda.fit = lda(fire~ area + DC + wind + Y, data = trainset)
lda.fit
plot(lda.fit)
##########PICK THE FIRE ONES OUT FIRST
table(forest$X)
barplot(table(forest$X), main = "X freq")
## Even number? ## No clear differentiation
table(forest$Y)
barplot(table(forest$Y), main = "Y freq")
## Seems like most of the fire occurs in the location where Y = 4 (5)
table(forest$month)
barplot(table(forest$month), main = "month freq")
## Most of the fire happens in August and September
table(forest$day)
barplot(table(forest$day), main = "day freq")
## No clear differentiation
table(forest$FFMC)
barplot(table(forest$FFMC), main = "FFMC freq")
## Left Skewed histogram
table(forest$DMC)
barplot(table(forest$DMC), main = "DMC freq")
## No clear differentiation
table(forest$DC)
barplot(table(forest$DC), main = "DC freq")
## No clear differentiation
table(forest$ISI)
barplot(table(forest$ISI), main = "ISI freq")
## No clear differentiation
table(forest$temp)
barplot(table(forest$temp), main = "temp freq")
## No clear differentiation
table(forest$RH)
barplot(table(forest$RH), main = "RH freq")
## Right Skewed histogram
table(forest$wind)
barplot(table(forest$wind), main = "wind freq")
## Right Skewed histogram
table(forest$rain)
barplot(table(forest$rain), main = "rain freq")
install.packages("car")
